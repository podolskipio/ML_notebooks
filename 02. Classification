{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### In this notebook we will be looking at one of two main classification problems, which is classification of categorical data, that means prediction of given labes. We can distinguish two subproblems: bi-class and multi-class problems.\n",
    "### Second problem not explained in this notebook is regression, that is prediction of constant values."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1. Loading Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import sklearn.datasets as ds"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Load toy data from https://scikit-learn.org/stable/datasets/index.html"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "iris = ds.load_iris()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      ".. _iris_dataset:\n",
      "\n",
      "Iris plants dataset\n",
      "--------------------\n",
      "\n",
      "**Data Set Characteristics:**\n",
      "\n",
      "    :Number of Instances: 150 (50 in each of three classes)\n",
      "    :Number of Attributes: 4 numeric, predictive attributes and the class\n",
      "    :Attribute Information:\n",
      "        - sepal length in cm\n",
      "        - sepal width in cm\n",
      "        - petal length in cm\n",
      "        - petal width in cm\n",
      "        - class:\n",
      "                - Iris-Setosa\n",
      "                - Iris-Versicolour\n",
      "                - Iris-Virginica\n",
      "                \n",
      "    :Summary Statistics:\n",
      "\n",
      "    ============== ==== ==== ======= ===== ====================\n",
      "                    Min  Max   Mean    SD   Class Correlation\n",
      "    ============== ==== ==== ======= ===== ====================\n",
      "    sepal length:   4.3  7.9   5.84   0.83    0.7826\n",
      "    sepal width:    2.0  4.4   3.05   0.43   -0.4194\n",
      "    petal length:   1.0  6.9   3.76   1.76    0.9490  (high!)\n",
      "    petal width:    0.1  2.5   1.20   0.76    0.9565  (high!)\n",
      "    ============== ==== ==== ======= ===== ====================\n",
      "\n",
      "    :Missing Attribute Values: None\n",
      "    :Class Distribution: 33.3% for each of 3 classes.\n",
      "    :Creator: R.A. Fisher\n",
      "    :Donor: Michael Marshall (MARSHALL%PLU@io.arc.nasa.gov)\n",
      "    :Date: July, 1988\n",
      "\n",
      "The famous Iris database, first used by Sir R.A. Fisher. The dataset is taken\n",
      "from Fisher's paper. Note that it's the same as in R, but not as in the UCI\n",
      "Machine Learning Repository, which has two wrong data points.\n",
      "\n",
      "This is perhaps the best known database to be found in the\n",
      "pattern recognition literature.  Fisher's paper is a classic in the field and\n",
      "is referenced frequently to this day.  (See Duda & Hart, for example.)  The\n",
      "data set contains 3 classes of 50 instances each, where each class refers to a\n",
      "type of iris plant.  One class is linearly separable from the other 2; the\n",
      "latter are NOT linearly separable from each other.\n",
      "\n",
      ".. topic:: References\n",
      "\n",
      "   - Fisher, R.A. \"The use of multiple measurements in taxonomic problems\"\n",
      "     Annual Eugenics, 7, Part II, 179-188 (1936); also in \"Contributions to\n",
      "     Mathematical Statistics\" (John Wiley, NY, 1950).\n",
      "   - Duda, R.O., & Hart, P.E. (1973) Pattern Classification and Scene Analysis.\n",
      "     (Q327.D83) John Wiley & Sons.  ISBN 0-471-22361-1.  See page 218.\n",
      "   - Dasarathy, B.V. (1980) \"Nosing Around the Neighborhood: A New System\n",
      "     Structure and Classification Rule for Recognition in Partially Exposed\n",
      "     Environments\".  IEEE Transactions on Pattern Analysis and Machine\n",
      "     Intelligence, Vol. PAMI-2, No. 1, 67-71.\n",
      "   - Gates, G.W. (1972) \"The Reduced Nearest Neighbor Rule\".  IEEE Transactions\n",
      "     on Information Theory, May 1972, 431-433.\n",
      "   - See also: 1988 MLC Proceedings, 54-64.  Cheeseman et al\"s AUTOCLASS II\n",
      "     conceptual clustering system finds 3 classes in the data.\n",
      "   - Many, many more ...\n"
     ]
    }
   ],
   "source": [
    "print(iris['DESCR'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now split your data to train and test sets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = iris.data\n",
    "Y = iris.target"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can create Pandas DataFrame from numpy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.DataFrame(iris.data, columns=iris.feature_names)\n",
    "target = pd.DataFrame(iris.target, columns=['class'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sepal length (cm)</th>\n",
       "      <th>sepal width (cm)</th>\n",
       "      <th>petal length (cm)</th>\n",
       "      <th>petal width (cm)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5.1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.7</td>\n",
       "      <td>3.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.6</td>\n",
       "      <td>3.1</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>3.6</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5.4</td>\n",
       "      <td>3.9</td>\n",
       "      <td>1.7</td>\n",
       "      <td>0.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>4.6</td>\n",
       "      <td>3.4</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>5.0</td>\n",
       "      <td>3.4</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>4.4</td>\n",
       "      <td>2.9</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>4.9</td>\n",
       "      <td>3.1</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   sepal length (cm)  sepal width (cm)  petal length (cm)  petal width (cm)\n",
       "0                5.1               3.5                1.4               0.2\n",
       "1                4.9               3.0                1.4               0.2\n",
       "2                4.7               3.2                1.3               0.2\n",
       "3                4.6               3.1                1.5               0.2\n",
       "4                5.0               3.6                1.4               0.2\n",
       "5                5.4               3.9                1.7               0.4\n",
       "6                4.6               3.4                1.4               0.3\n",
       "7                5.0               3.4                1.5               0.2\n",
       "8                4.4               2.9                1.4               0.2\n",
       "9                4.9               3.1                1.5               0.1"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "But we will continue using numpy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now it would be good to split data to testing and training sets, so that model will be trained on a subset of data and evaluated on unseen during training data. The method below splits data randomly into training and test sets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.4, random_state=4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(90, 4)\n",
      "(60, 4)\n"
     ]
    }
   ],
   "source": [
    "print(X_train.shape)\n",
    "print(X_test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's train some classifiers"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2. Training simple model and predicting values"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2.1 KNN classifier"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this example we will be predicting one out of three possible labels for iris dataset. We will do it using KNN classifier."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "https://towardsdatascience.com/machine-learning-basics-with-the-k-nearest-neighbors-algorithm-6a6e71d01761"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "knn = KNeighborsClassifier(n_neighbors=3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n",
      "           metric_params=None, n_jobs=None, n_neighbors=3, p=2,\n",
      "           weights='uniform')\n"
     ]
    }
   ],
   "source": [
    "print(knn)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We now need to train our model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n",
       "           metric_params=None, n_jobs=None, n_neighbors=3, p=2,\n",
       "           weights='uniform')"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knn.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we need to predict data on which we didn't train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = knn.predict(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now it would be nice to check how well our model is doing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import metrics"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Our first evaluation score is accuracy, which means that how many data points are predicted correctly"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9666666666666667\n"
     ]
    }
   ],
   "source": [
    "print(metrics.accuracy_score(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "k_range = range(1,20)\n",
    "scores = []\n",
    "for k in k_range:\n",
    "    knn = KNeighborsClassifier(n_neighbors=k)\n",
    "    knn.fit(X_train, y_train)\n",
    "    y_pred = knn.predict(X_test)\n",
    "    scores.append(metrics.accuracy_score(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Testing Accuracy')"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# allow plots to appear within the notebook\n",
    "%matplotlib inline\n",
    "\n",
    "# plot the relationship between K and testing accuracy\n",
    "plt.plot(k_range, scores)\n",
    "plt.xlabel('Value of K for KNN')\n",
    "plt.ylabel('Testing Accuracy')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2.2 Binary classifier: SGD(Stochastic Gradient Descent) classifier for handwritten digits"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.datasets import fetch_mldata"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "mnist = ds.load_digits()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      ".. _digits_dataset:\n",
      "\n",
      "Optical recognition of handwritten digits dataset\n",
      "--------------------------------------------------\n",
      "\n",
      "**Data Set Characteristics:**\n",
      "\n",
      "    :Number of Instances: 5620\n",
      "    :Number of Attributes: 64\n",
      "    :Attribute Information: 8x8 image of integer pixels in the range 0..16.\n",
      "    :Missing Attribute Values: None\n",
      "    :Creator: E. Alpaydin (alpaydin '@' boun.edu.tr)\n",
      "    :Date: July; 1998\n",
      "\n",
      "This is a copy of the test set of the UCI ML hand-written digits datasets\n",
      "http://archive.ics.uci.edu/ml/datasets/Optical+Recognition+of+Handwritten+Digits\n",
      "\n",
      "The data set contains images of hand-written digits: 10 classes where\n",
      "each class refers to a digit.\n",
      "\n",
      "Preprocessing programs made available by NIST were used to extract\n",
      "normalized bitmaps of handwritten digits from a preprinted form. From a\n",
      "total of 43 people, 30 contributed to the training set and different 13\n",
      "to the test set. 32x32 bitmaps are divided into nonoverlapping blocks of\n",
      "4x4 and the number of on pixels are counted in each block. This generates\n",
      "an input matrix of 8x8 where each element is an integer in the range\n",
      "0..16. This reduces dimensionality and gives invariance to small\n",
      "distortions.\n",
      "\n",
      "For info on NIST preprocessing routines, see M. D. Garris, J. L. Blue, G.\n",
      "T. Candela, D. L. Dimmick, J. Geist, P. J. Grother, S. A. Janet, and C.\n",
      "L. Wilson, NIST Form-Based Handprint Recognition System, NISTIR 5469,\n",
      "1994.\n",
      "\n",
      ".. topic:: References\n",
      "\n",
      "  - C. Kaynak (1995) Methods of Combining Multiple Classifiers and Their\n",
      "    Applications to Handwritten Digit Recognition, MSc Thesis, Institute of\n",
      "    Graduate Studies in Science and Engineering, Bogazici University.\n",
      "  - E. Alpaydin, C. Kaynak (1998) Cascading Classifiers, Kybernetika.\n",
      "  - Ken Tang and Ponnuthurai N. Suganthan and Xi Yao and A. Kai Qin.\n",
      "    Linear dimensionalityreduction using relevance weighted LDA. School of\n",
      "    Electrical and Electronic Engineering Nanyang Technological University.\n",
      "    2005.\n",
      "  - Claudio Gentile. A New Approximate Maximal Margin Classification\n",
      "    Algorithm. NIPS. 2000.\n"
     ]
    }
   ],
   "source": [
    "print(mnist['DESCR'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "X, y = mnist[\"data\"], mnist[\"target\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 8 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "images_and_labels = list(zip(mnist.images, mnist.target))\n",
    "for index, (image, label) in enumerate(images_and_labels[:8]):\n",
    "    plt.subplot(2, 4, index + 1)\n",
    "    plt.axis('off')\n",
    "    plt.imshow(image, cmap=plt.cm.gray_r, interpolation='nearest')\n",
    "    plt.title('Training: %i' % label)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's split our data into training and test sets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Let's start from training a binary classifier, that means if given image is numer 5 or not"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_train_5 = (y_train == 5) # True for all 5s, False for all other digits. \n",
    "y_test_5 = (y_test == 5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SGDClassifier(alpha=0.0001, average=False, class_weight=None,\n",
       "       early_stopping=False, epsilon=0.1, eta0=0.0, fit_intercept=True,\n",
       "       l1_ratio=0.15, learning_rate='optimal', loss='hinge', max_iter=1000,\n",
       "       n_iter=None, n_iter_no_change=5, n_jobs=None, penalty='l2',\n",
       "       power_t=0.5, random_state=None, shuffle=True, tol=0.001,\n",
       "       validation_fraction=0.1, verbose=0, warm_start=False)"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import SGDClassifier \n",
    "sgd_clf = SGDClassifier(max_iter=1000, tol=1e-3)\n",
    "sgd_clf.fit(X_train, y_train_5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's choose some digit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAPUAAAD4CAYAAAA0L6C7AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAA9xJREFUeJzt3UFRI1EYRtHOFALAQRwQCUhoB1iJlEgABSABCSABBT0Gspma5M/M5ZxlL/prqrj1qrJ5u23bFqDj160/ALgsUUOMqCFG1BAjaoi5u9J7/aR+AZ+fn2Nb67qObX18fIxtxe3OPXRSQ4yoIUbUECNqiBE1xIgaYkQNMaKGGFFDjKghRtQQI2qIETXEiBpiRA0xooYYUUOMqCFG1BAjaogRNcSIGmJEDTGihhhRQ4yoIeZa1+5wAafTaWxr8oofrstJDTGihhhRQ4yoIUbUECNqiBE1xIgaYkQNMaKGGFFDjKghRtQQI2qIETXEiBpiRA0xooYYUUOMqCFG1BAjaogRNcSIGmJEDTGihpjdtm3XeO9VXnprr6+vo3vruo5tvby8jG09Pj6Obe33+7GtG9ide+ikhhhRQ4yoIUbUECNqiBE1xIgaYkQNMaKGGFFDjKghRtQQI2qIETXEiBpiRA0xooYYUUOMqCFG1BAjaogRNcSIGmJEDTGihhhRQ4yoIcZdWn/g/v5+dO9wOIxtTd6l9fDwMLb19vY2trUsy/L09DQ55y4t+AlEDTGihhhRQ4yoIUbUECNqiBE1xIgaYkQNMaKGGFFDjKghRtQQI2qIETXEiBpiRA0xooYYUUOMqCFG1BAjaogRNcSIGmJEDTF3t/6Av/X+/j629f39Pba1LMtyOp3Gto7H49jWpMn/j2UZv3bnLCc1xIgaYkQNMaKGGFFDjKghRtQQI2qIETXEiBpiRA0xooYYUUOMqCFG1BAjaogRNcSIGmJEDTGihhhRQ4yoIUbUECNqiBE1xIgaYv77a3cmrzl5fn4e21qW2b/t6+trbGvSv3ANzjQnNcSIGmJEDTGihhhRQ4yoIUbUECNqiBE1xIgaYkQNMaKGGFFDjKghRtQQI2qIETXEiBpiRA0xooYYUUOMqCFG1BAjaogRNcSIGmJ227Zd471XeSnXczgcxrbWdR3bOh6PY1s3sDv30EkNMaKGGFFDjKghRtQQI2qIETXEiBpiRA0xooYYUUOMqCFG1BAjaogRNcSIGmJEDTGihhhRQ4yoIUbUECNqiBE1xIgaYkQNMaKGGFFDzN2tP4CfZ7/f3/oT0pzUECNqiBE1xIgaYkQNMaKGGFFDjKghRtQQI2qIETXEiBpiRA0xooYYUUOMqCFG1BAjaogRNcSIGmJEDTGihhhRQ4yoIUbUECNqiNlt23brbwAuyEkNMaKGGFFDjKghRtQQI2qIETXEiBpiRA0xooYYUUOMqCFG1BAjaogRNcSIGmJEDTGihhhRQ4yoIUbUECNqiBE1xPwGgsVAOnEmoosAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "some_digit = X[100]\n",
    "some_digit_image = some_digit.reshape(8, 8)\n",
    "plt.imshow(some_digit_image, cmap = matplotlib.cm.binary, interpolation=\"nearest\")\n",
    "plt.axis(\"off\") \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([False])"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sgd_clf.predict([some_digit])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAPUAAAD4CAYAAAA0L6C7AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAABABJREFUeJzt3UFNq1sYhtHdkzsHCZVQCUioA4IDHCABCVigDqgCioKCgx8FPQYYnm5un6417KAvJDzZCZNvdTqdBtDx57d/AODfEjXEiBpiRA0xooaY/870vdP+pb7b7WZNjefn52lbY4yxLMu0rY+Pj2lbMx2Px6l76/V65tzqpw+91BAjaogRNcSIGmJEDTGihhhRQ4yoIUbUECNqiBE1xIgaYkQNMaKGGFFDjKghRtQQI2qIETXEiBpiRA0xooYYUUOMqCFG1BAjaog519mdaV5eXqZt7ff7aVtjjHFzczNt6+npadrW3d3dtK3JZ3D+F7zUECNqiBE1xIgaYkQNMaKGGFFDjKghRtQQI2qIETXEiBpiRA0xooYYUUOMqCFG1BAjaogRNcSIGmJEDTGihhhRQ4yoIUbUECNqiLn4szubzWba1uFwmLY1xtzf7fHxcdrW7e3ttK1r5KWGGFFDjKghRtQQI2qIETXEiBpiRA0xooYYUUOMqCFG1BAjaogRNcSIGmJEDTGihhhRQ4yoIUbUECNqiBE1xIgaYkQNMaKGGFFDjKgh5uJvac309fWV3Zt5t+vz83Pa1jXyUkOMqCFG1BAjaogRNcSIGmJEDTGihhhRQ4yoIUbUECNqiBE1xIgaYkQNMaKGGFFDjKghRtQQI2qIETXEiBpiRA0xooYYUUOMqCFmdTqdzvG9Z/nSnyzLMmtqvL6+Ttua7eHhYdrWmf7mrtHqpw+91BAjaogRNcSIGmJEDTGihhhRQ4yoIUbUECNqiBE1xIgaYkQNMaKGGFFDjKghRtQQI2qIETXEiBpiRA0xooYYUUOMqCFG1BAjaoi5+LM7ZbvdbtrWdrudtvX+/j5ta7PZTNv6Bc7uwDUQNcSIGmJEDTGihhhRQ4yoIUbUECNqiBE1xIgaYkQNMaKGGFFDjKghRtQQI2qIETXEiBpiRA0xooYYUUOMqCFG1BAjaogRNcRc/NmdZVlmTY39fj9ta4wx7u/vp22t1+tpW4fDYdpWnLM7cA1EDTGihhhRQ4yoIUbUECNqiBE1xIgaYkQNMaKGGFFDjKghRtQQI2qIETXEiBpiRA0xooYYUUOMqCFG1BAjaogRNcSIGmJEDTGihpiLv6X19vY2a2pst9tpW2OM8f39PW3reDxO25p5tyvOLS24BqKGGFFDjKghRtQQI2qIETXEiBpiRA0xooYYUUOMqCFG1BAjaogRNcSIGmJEDTGihhhRQ4yoIUbUECNqiBE1xIgaYkQNMaKGmHOd3QF+iZcaYkQNMaKGGFFDjKghRtQQI2qIETXEiBpiRA0xooYYUUOMqCFG1BAjaogRNcSIGmJEDTGihhhRQ4yoIUbUECNqiPkLfslaUfGxID8AAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "some_digit = X[15]\n",
    "some_digit_image = some_digit.reshape(8, 8)\n",
    "plt.imshow(some_digit_image, cmap = matplotlib.cm.binary, interpolation=\"nearest\")\n",
    "plt.axis(\"off\") \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ True])"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sgd_clf.predict([some_digit])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Cross-validation to measure accuracy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A good way to evaluate model is to use cross-validation method.\n",
    "Cross-validation is a resampling procedure used to evaluate machine learning models on a limited data sample."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.98333333, 0.99721448, 0.98885794])"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import cross_val_score\n",
    "cross_val_score(sgd_clf, X_train, y_train_5, cv=3, scoring=\"accuracy\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Sometimes it is better to implement your own cross-validation to keep control over whats happening inside."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9861751152073732\n",
      "0.9907407407407407\n",
      "0.9953488372093023\n",
      "0.9953488372093023\n",
      "0.9906976744186047\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import StratifiedKFold \n",
    "from sklearn.base import clone\n",
    "\n",
    "skfolds = StratifiedKFold(n_splits=5, random_state=42) #  it splits data using stratified sampling, to have a representative ratio of each class\n",
    "for train_index, test_index in skfolds.split(X_train, y_train_5):\n",
    "    clone_clf = clone(sgd_clf)\n",
    "    X_train_folds = X_train[train_index]\n",
    "    y_train_folds = (y_train_5[train_index])\n",
    "    X_test_fold = X_train[test_index] \n",
    "    y_test_fold = (y_train_5[test_index])\n",
    "    clone_clf.fit(X_train_folds, y_train_folds)\n",
    "    y_pred = clone_clf.predict(X_test_fold)\n",
    "    n_correct = sum(y_pred == y_test_fold)\n",
    "    print(n_correct / len(y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Confusion Matrix"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Confusion matrix is a good way to evaluate the performance of your classifier.\n",
    "The number of correct and incorrect predictions are summarized with count values and broken down by each class.\n",
    "cross_val_predict functions performs K-fold cross-validation, but instead of returning the evaluation scores, it returns the predic‐ tions made on each test fold."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import cross_val_predict\n",
    "y_test_pred = cross_val_predict(sgd_clf, X_test, y_test_5, cv=3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Each column in confusion matrix represents a predicted class, and each row represents actual class.\n",
    "Here we have 640 true negatives(classified correctly as not 5s), 8 false positives(wrongly classified as not 5s), 6 false negatives(wrongly classified as non 5s) and 165 true positives(correctly classified as 5s)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[640,   8],\n",
       "       [  6,  65]])"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "confusion_matrix(y_test_5, y_test_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "But it is good to have single value as a metric."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\\begin{equation*}\n",
    "Precision = \\frac{TP}{TP + FP}\n",
    "\\end{equation*}\n",
    "\n",
    "where TP is the number of true positives, and FP is the number of false positives.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\\begin{equation*}\n",
    "Recall = \\frac{TP}{TP + FN}\n",
    "\\end{equation*}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Precision takes into account only positive values to ensure it is correct, so it is used along with recall, which is also called sensitivity or true positive rate."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![title](img/TP-FP.png)\n",
    "Source: Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can calculate them using scikit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import precision_score, recall_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8904109589041096"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "precision_score(y_test_5, y_test_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9154929577464789"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "recall_score(y_test_5, y_test_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can also combinte those two metrics into one called F1 score. It is a harmonic mean of precision and recall."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9027777777777778"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import f1_score\n",
    "f1_score(y_test_5, y_test_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The F1 score favors classifiers that have similar precision and recall.\n",
    "\n",
    "Sometimes it is not desired effect, to have both of them maximal.\n",
    "\n",
    "But basic intuition is that, if we are looking of a classifier that detects something which could be showed safely to user, then we will be looking for classifier that rejects many good instances(low recall), but keeps only good ones(high precision).\n",
    "If you are training a classifier that tries to classify criminals, then you can accept few false alerts but you would like to maximize potential criminials. So high recall and small precision is good for you.\n",
    "\n",
    "Generally increasing precision reduces recall, and vice versa."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ROC Curve"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ROC curve is used with binary classifiers, it plots false positive rate(FPR). FPR is the ratio of negative instances that are incorrectly classified as positive. It is equal to one minus the true negative rate, which is the ratio of negative instances that are correctly classified as negative."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import roc_curve\n",
    "y_scores = cross_val_predict(sgd_clf, X_train, y_train_5, cv=3, method=\"decision_function\")\n",
    "fpr, tpr, thresholds = roc_curve(y_train_5, y_scores)\n",
    "def plot_roc_curve(fpr, tpr, label=None): \n",
    "    plt.plot(fpr, tpr, linewidth=2, label=label) \n",
    "    plt.plot([0, 1], [0, 1], 'k--') \n",
    "    plt.axis([0, 1, 0, 1])\n",
    "plt.xlabel('False Positive Rate') \n",
    "plt.ylabel('True Positive Rate')\n",
    "plot_roc_curve(fpr, tpr) \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The dotted line represents ROC curve of purely random classifier. A good classifier stays as far away from that line as possible (toward the top-left corner).\n",
    "\n",
    "One way to compare classifiers is to measure the area under the curve (AUC). A per‐ fect classifier will have a ROC AUC equal to 1, whereas a purely random classifier will have a ROC AUC equal to 0.5."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9912704845486644"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import roc_auc_score\n",
    "roc_auc_score(y_train_5, y_scores)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.3 Multiclass classification"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Multiclass classifiers can distinguish between more then two classes. Some algorithms are capable of classifying more then two classes (Random Forest or Naive Bayes) but on the other hand some are not. \n",
    "But there are some ways to make them do.\n",
    "\n",
    "One strategy is using One-versus-all strategy. It runs binary classifier for each class and returns the class, where the model gave highest score for that class.\n",
    "\n",
    "Another strategy is to train binary classifier for every pair of classes and learning to distinguish one from other. This strategy is called one-versus-one.\n",
    "\n",
    "Scikit detects when you try to use a binary classification algorithm for a multi‐ class classification task, and it automatically runs OvA(except for SVM classifiers for which it uses OvO)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([5])"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sgd_clf.fit(X_train, y_train)\n",
    "sgd_clf.predict([some_digit])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-6869.85897737, -3093.84062121, -6263.7901704 , -3586.25672375,\n",
       "        -3706.95586373,  2510.77085167, -6470.74658405, -2161.531805  ,\n",
       "        -4155.90081093, -2440.77043344]])"
      ]
     },
     "execution_count": 129,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "some_digit_scores = sgd_clf.decision_function([some_digit])\n",
    "some_digit_scores"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 130,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.argmax(some_digit_scores)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can also specify if you want to use OvO or OvA strategy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([5])"
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.multiclass import OneVsOneClassifier\n",
    "ovo_clf = OneVsOneClassifier(SGDClassifier(max_iter=1000, tol=1e-3))\n",
    "ovo_clf.fit(X_train, y_train)\n",
    "ovo_clf.predict([some_digit])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "45"
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(ovo_clf.estimators_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.91966759, 0.95833333, 0.93837535])"
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cross_val_score(sgd_clf, X_train, y_train, cv=3, scoring=\"accuracy\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 98,   0,   0,   0,   2,   1,   0,   0,   0,   0],\n",
       "       [  0, 107,   1,   0,   0,   0,   1,   0,   3,   1],\n",
       "       [  0,   0, 105,   0,   0,   0,   0,   0,   0,   0],\n",
       "       [  0,   1,   2,  94,   0,   0,   0,   0,   4,   4],\n",
       "       [  0,   1,   0,   0, 110,   0,   0,   0,   3,   0],\n",
       "       [  0,   2,   1,   1,   0, 105,   1,   0,   1,   0],\n",
       "       [  0,   1,   1,   0,   2,   0, 101,   0,   0,   0],\n",
       "       [  0,   0,   0,   1,   3,   0,   0, 101,   1,   2],\n",
       "       [  0,   8,   0,   1,   1,   1,   0,   0,  95,   1],\n",
       "       [  0,   2,   0,   1,   1,   1,   0,   0,   5,  99]])"
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train_pred = cross_val_predict(sgd_clf, X_train, y_train, cv=3)\n",
    "conf_mx = confusion_matrix(y_train, y_train_pred)\n",
    "conf_mx"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAP4AAAECCAYAAADesWqHAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAACohJREFUeJzt3U+IXeUZx/HfL7kOmcT4Z2gQzISqEG1FLJGh+AekGBdplbrpwkKEuplNq1EsYrtx2Y2ILooQYt1U7CJmUUTUQt10EzomQkzGglGbjEacMtQMQhwv9+ni3mI045xz8b73zMnz/UAgM568PIzznXPunXve64gQgFw2ND0AgPEjfCAhwgcSInwgIcIHEiJ8IKHGwre9x/a/bL9n+4mm5qjL9g7bb9qet33c9r6mZ6rD9kbbR22/0vQsddi+wvZB2+8Ovta3NT1TFduPDr4n3rH9ku1NTc9UpZHwbW+U9EdJP5V0o6Rf2r6xiVmG0JX0WET8UNKtkn7dgpklaZ+k+aaHGMKzkl6LiB9I+pHW+ey2t0t6WNJMRNwkaaOk+5udqlpTZ/wfS3ovIt6PiBVJf5F0X0Oz1BIRZyLiyODvy+p/Q25vdqq12Z6WdI+kA03PUoftyyTdKel5SYqIlYj4b7NT1dKRNGm7I2mzpI8bnqdSU+Fvl3T6vI8XtM4jOp/tayTtknS42UkqPSPpcUm9pgep6TpJi5JeGDw8OWB7S9NDrSUiPpL0lKRTks5I+iwi3mh2qmpNhe9VPteK1w7bvlTSy5IeiYizTc/zbWzfK+nTiHir6VmG0JF0i6TnImKXpM8lrevnf2xfqf7V6rWSrpa0xfbeZqeq1lT4C5J2nPfxtFpweWT7EvWjfzEiDjU9T4U7JP3c9ofqP5S6y/afmx2p0oKkhYj4/5XUQfV/EKxnd0v6ICIWI+JLSYck3d7wTJWaCv+fknbavtb2hPpPhvy1oVlqsW31H3vOR8TTTc9TJSJ+FxHTEXGN+l/fv0fEuj4TRcQnkk7bvmHwqd2STjQ4Uh2nJN1qe/Pge2S31vkTklL/0mrsIqJr+zeSXlf/WdA/RcTxJmYZwh2SHpB0zPbbg8/9PiJebXCmi9FDkl4cnBDel/Rgw/OsKSIO2z4o6Yj6v/k5Kml/s1NVM7flAvnwyj0gIcIHEiJ8ICHCBxIifCChxsO3Pdv0DMNo27wSM49D2+ZtPHxJrfqCqX3zSsw8Dq2adz2ED2DMiryAZ2pqKqanp2sdu7S0pKmpqVrHHjt27LuMBaQQEavdBPc1RV6yOz09rVdfHf0rWXfs2FF9UCKdTplXXPd6Ze7iLbUuhselPpAQ4QMJET6QEOEDCRE+kFCt8Nu2Bz6AtVWG39I98AGsoc4Zv3V74ANYW53wW70HPoAL1Qm/1h74tmdtz9meW1pa+u6TASimTvi19sCPiP0RMRMRM3Vfew+gGXXCb90e+ADWVnmXR0v3wAewhlq3dw3eNII3jgAuErxyD0iI8IGECB9IiPCBhAgfSKjIZpu2i7wF7xdffFFiWUnS5ORkkXXZZ+4rGzaUO8+U+jpPTEwUWVeSut3uyNfs9Xq1NtvkjA8kRPhAQoQPJET4QEKEDyRE+EBChA8kRPhAQoQPJET4QEKEDyRE+EBChA8kRPhAQoQPJET4QEKEDyRE+EBChA8kRPhAQoQPJET4QEKt2l67pOXl5SLrbt26tci6wLdhe20AqyJ8ICHCBxIifCAhwgcSInwgIcIHEqoM3/YO22/anrd93Pa+cQwGoJxOjWO6kh6LiCO2t0p6y/bfIuJE4dkAFFJ5xo+IMxFxZPD3ZUnzkraXHgxAOUM9xrd9jaRdkg6XGAbAeNS51Jck2b5U0suSHomIs6v891lJsyOcDUAhtW7SsX2JpFckvR4RT9c4npt0BrhJB+M2kpt0bFvS85Lm60QPYP2r8xj/DkkPSLrL9tuDPz8rPBeAgiof40fEPyRVXjoAaA9euQckRPhAQoQPJET4QEKEDyTUql12N2wo93Oq1NonTpS7l+n6668vtjb6Jicnmx5hKOfOnVOv12OXXQAXInwgIcIHEiJ8ICHCBxIifCAhwgcSInwgIcIHEiJ8ICHCBxIifCAhwgcSInwgIcIHEiJ8ICHCBxIifCAhwgcSInwgIcIHEiJ8ICG21x7o9XrF1i6lxP87Seq/MzokaWJiotjaKysrRdaNCLbXBnAhwgcSInwgIcIHEiJ8ICHCBxIifCCh2uHb3mj7qO1XSg4EoLxhzvj7JM2XGgTA+NQK3/a0pHskHSg7DoBxqHvGf0bS45La97pWABeoDN/2vZI+jYi3Ko6btT1ne25k0wEoovImHdt/kPSApK6kTZIuk3QoIvau8W+4SWcMuEmnvIv1Jp2h7s6z/RNJv42IeyuOI/wxIPzyLtbw+T0+kBD34w9wxv8KZ/yvcMYHcNEgfCAhwgcSInwgIcIHEuo0PcAwSj6r30alnn1fXl4usu7ll19eZF2p3G9lut1ukXWbRklAQoQPJET4QEKEDyRE+EBChA8kRPhAQoQPJET4QEKEDyRE+EBChA8kRPhAQoQPJET4QEKEDyRE+EBChA8kRPhAQoQPJET4QEK8d15hJd+Tr9Mps0lyqZ1lFxcXi6wrSdu2bSu2dtvw3nkAVkX4QEKEDyRE+EBChA8kRPhAQoQPJFQrfNtX2D5o+13b87ZvKz0YgHLqvgLkWUmvRcQvbE9I2lxwJgCFVYZv+zJJd0r6lSRFxIqklbJjASipzqX+dZIWJb1g+6jtA7a3FJ4LQEF1wu9IukXScxGxS9Lnkp745kG2Z23P2Z4b8YwARqxO+AuSFiLi8ODjg+r/IPiaiNgfETMRMTPKAQGMXmX4EfGJpNO2bxh8arekE0WnAlBU3Wf1H5L04uAZ/fclPVhuJACl1Qo/It6WxCU8cJHglXtAQoQPJET4QEKEDyRE+EBChA8k1Krttduo5JbgpbbXXllp3z1Ypbbuvuqqq4qsK5X53uh2u2yvDWB1hA8kRPhAQoQPJET4QEKEDyRE+EBChA8kRPhAQoQPJET4QEKEDyRE+EBChA8kRPhAQoQPJET4QEKEDyRE+EBChA8kRPhAQq3aZXdqaqrEspKkpaWlIuuW3GW3bXq9XtMjDO3kyZPF1t65c+fI1+z1euyyC2B1hA8kRPhAQoQPJET4QEKEDyRE+EBCtcK3/ajt47bfsf2S7U2lBwNQTmX4trdLeljSTETcJGmjpPtLDwagnLqX+h1Jk7Y7kjZL+rjcSABKqww/Ij6S9JSkU5LOSPosIt4oPRiAcupc6l8p6T5J10q6WtIW23tXOW7W9pztudGPCWCU6lzq3y3pg4hYjIgvJR2SdPs3D4qI/RExExEzox4SwGjVCf+UpFttb7ZtSbslzZcdC0BJdR7jH5Z0UNIRSccG/2Z/4bkAFNSpc1BEPCnpycKzABgTXrkHJET4QEKEDyRE+EBChA8kRPhAQrV+nbdenD17tukRkMzNN99cbO2FhYWRr7lnz55ax3HGBxIifCAhwgcSInwgIcIHEiJ8ICHCBxIifCAhwgcSInwgIcIHEiJ8ICHCBxIifCAhwgcSInwgIcIHEiJ8ICHCBxIifCAhwgcSckSMflF7UdK/ax7+PUn/GfkQ5bRtXomZx2G9zPv9iNhWdVCR8Idhey4iZhodYghtm1di5nFo27xc6gMJET6Q0HoIf3/TAwypbfNKzDwOrZq38cf4AMZvPZzxAYwZ4QMJET6QEOEDCRE+kND/AH4Eolcho24YAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 288x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.matshow(conf_mx, cmap=plt.cm.gray) \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Most images are on the main diagonal, which means that they were classified correctly.\n",
    "\n",
    "The 5s look slightly darker than the other digits, which could mean that there are fewer images of 5s in the dataset or that the classifier does not perform as well on 5s as on other digits."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 288x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "row_sums = conf_mx.sum(axis=1, keepdims=True) \n",
    "norm_conf_mx = conf_mx / row_sums\n",
    "np.fill_diagonal(norm_conf_mx, 0) \n",
    "plt.matshow(norm_conf_mx, cmap=plt.cm.gray) \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Rows represent actual classes, while columns represent predicted classes.\n",
    "\n",
    "Bright columns mean that they get misclassified.\n",
    "\n",
    "Some rows are pretty dark, this means that most of them are classified correctly."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Multilabel classification\n",
    "\n",
    "Multilabel classification is a classification, where you want to assign more than one class to each instance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n",
       "           metric_params=None, n_jobs=None, n_neighbors=5, p=2,\n",
       "           weights='uniform')"
      ]
     },
     "execution_count": 139,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "y_train_large = (y_train >= 7)\n",
    "y_train_odd = (y_train % 2 == 1)\n",
    "y_multilabel = np.c_[y_train_large, y_train_odd]\n",
    "knn_clf = KNeighborsClassifier() \n",
    "knn_clf.fit(X_train, y_multilabel)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[False,  True]])"
      ]
     },
     "execution_count": 141,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knn_clf.predict([some_digit])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Good way to measure such model is to calculate F1 score for each label and then average the results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9768855041910159"
      ]
     },
     "execution_count": 142,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train_knn_pred = cross_val_predict(knn_clf, X_train, y_train, cv=3)\n",
    "f1_score(y_train, y_train_knn_pred, average=\"macro\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
